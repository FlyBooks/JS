1.  a 标签

a标签中有一个叫做target的属性，这个属性的作用就是专门用来控制如何跳转的：
_self: 用于在当前选项卡中跳转， 也就是不新建界面跳转，默认值是_self
_blank: 用于在新的选项卡中跳转，也就是新建界面跳转

a标签中的title属性：
用来控制鼠标悬停时显示的提示文字


2. base标签
<base target="_blank"> 
专门用来统一指定当前网页中所有的超链接（a标签）的打开方式，必须写在head里面

如果既在base中指定了打开方式，又在a标签中指定了打开方式，浏览器会按照a标签中指定的执行

3. 假链接
点击之后不会跳转的链接就是假链接

加链接格式： 1: #(会自动回到网页的顶部) 2: javascript：（不会返回到顶部）
<a href="#"></a>
<a href="javascript:"></a>


4.锚点
<a href="#id">跳转到id标签处</a>
通过a标签跳转到指定位置，是没有动画过程的，是直接一下子就跳转到指定位置的
可以跳转到新的界面的指定位置
<a href="newPage.html#bottom">跳转到新界面的指定位置</a>

5.列表
分类： 无序列表(unordered list)， 有序列表(ordered list)， 定义列表（definition list）
<ul>
  <li></li>
</ul>

li: 是list item的缩写

定义表格：
<dl>
  <dt></dt><dd></dd>
  <dt></dt><dd></dd>
</dl>
dt: definition title的缩写，表示定义列表中的标题
dd: definition description的缩写，表示标题对应的描述
dl跟dt/dd是一个整体，他们一般是不会单独出现

6.表格标签
作用： 用来给一堆数据添加表格语意
其实表格是一种数据的展现形式，当数据量非常大的时候，表格这种展现形式被认为是最清晰的一种展现形式；

格式：
<table>
  <tr>
    <td></td>
  </tr>
</table>
table代表整个表格， tr代表整张表格中的一行数据，td代表表格中一行里面的一个单元格

注意点： 
表格标签有一个边框属性，这个属性决定了边框的宽度，默认情况下这个属性的值是0，所以看不到边框

1.宽度和高度的属性：table跟td标签是可以使用的
2.水平对齐跟垂直对齐的属性： table标签，tr标签，td标签都可以使用水平对齐； 而垂直对齐只能给tr跟td标签使用；
3.外边距和内边距属性： 只能给table标签使用

细线表格的制作方式：
1.给table标签设置background-color（bgcolor可以直接写，使用background-color必须先写style）
2.给tr标签设置background-color(bgcolor可以直接写，使用background-color必须先写style)
3.给table标签设置cellspacing = '1px'

在表格标签中提供了一个标签专门用来设置表格的标题，这个标签叫做caption
caption标签一定要写在table标签中，并且紧跟在table标签后面

由于表格中存储的数据比较复杂，为了方便管理和提升语意，我们可以对表格中存储的数据进行分类：
表格中存储的数据可以分为4类：
<table>
<caption></caption>
<thead><tr><th></th>...</tr></thead>
<tbody><tr><td></td>...</tr>...</tbody>
<tfoot><tr><td></td>...</tr>...</tfoot>
</table>

1.水平方向上的单元格合并
可以给td标签添加一个colspan属性，来指定把某一个单元格当做多个单元格来看待
比如： <td colspan="2"></td>
单元格合并永远都是向后或者向下合并

2.垂直方向上的单元格合并：
可以给td标签设置一个rowspan属性，来指定把某一个单元格当做多个单元格来看待
比如：<td rowspan="2"></td>

7.表单
专门用来收集用户信息的。

什么是表单元素？
什么是元素： 在html中，标签/标记/元素都是指HTML中的标签
例如： <a>： a标签， a标记，a元素

input标签：
input标签的type属性有很多取值，不同的取值决定了input标签的功能与外观
value="xxx"可以给Input输入框设置默认值

单选框：默认情况下是不会相互排斥的，要想互斥就必须给每一个单选框都设置一个name属性，然后name属性还必须设置相同的值
默认选中某一个值： checked="checked"(推荐)

checkbox是多选框

<input type="image"> 是定义一个图片按钮， 作用：配合JS完成一些操作

重置按钮：<input type="reset">
作用：清空表单中的数据
注意点： 重置按钮有默认的按钮标题， 默认叫做重置

提交按钮： <input type="submit>
作用: 将表单中的数据提交到远程服务器
注意点： 要想把表单中的数据提交到远程服务器，必须满足两个条件：
1. 必须告诉表单需要提交到哪个服务器： form标签中的action来说明要提交到哪个服务器
2. 必须告诉表单那些数据要提交：给表单标签添加name属性

隐藏域：用于悄悄咪咪地收集用户的信息，是不会出现在界面中的
<input type="hidden">

8.label
将文字跟输入框绑定在一起，可以使用Label标签
绑定格式：1. 用label将文字包裹起来 2.输入框添加一个id属性。3. 将label标签中的for属性跟输入框中的id进行绑定
<label for="account">账号：</label> <input type="text" id="account">

或者： <label>账号：<input type="text"></label>

9.datalist标签
作用： 给输入框绑定待选项
格式： <datalist>
        <option>待选项内容</option>...
      </datalist>

10.select标签：下拉列表
格式：<select><option></option>...</select>
可以给option标签添加一个selected属性来指定列表的默认值
可以通过给option标签包裹一层optgroup标签来给下拉列表中的数据进行分类
格式： 
  <select>
    <optgroup label="分组名称">
     <option></option> ...
    </optgroup>...
  </select>

11. textarea
格式： <textarea></textarea>

注意点：  1. 默认情况下可以无限换行 
         2.默认情况下，输入框有自己的高度和宽度，也可以通过cols跟rows设置,还是可以无限往下输入的
        <textarea cols="2" rows="5"></textarea>
        3.默认情况下， textarea是可以变换大小的。可以通过css设置不可以修改大小：
        textarea {
          resize: none;
        }


12. video标签
作用： 播放视频
格式： <video src="路径"></video>
src：用于告诉video标签是否需要播放视频
autoplay: 用于告诉video标签是否自动播放视频
controls: 是否显示控制条
poster: 用于告诉video标签没有播放之前，先显示的一张站位图片
loop: 一般用于广告视频，告诉video标签视频播放完毕后是否需要循环播放
preload: 预加载，但是需要注意的是preload跟autoplay相冲，如果设置了autoplay属性，那么preload属性就会失效
muted: 静音
width/height: 设置宽度跟高度，建议只设置一个

由于视频数据非常非常的重要，所以五大浏览器厂商都不愿意支持别人的视频格式，所以导致了没有一种视频格式是所有浏览器都支持的。这个时候W3C为了解决这个问题，退出了
video的第二种标签格式。

<video>
   <source src="" type=""></source>
   <source src="" type=""></source>
</video>
video第二种格式存在的意义，就是为了解决浏览器适配问题。

13. audio标签
格式： <audio src=""></audio>

第二种格式：
<audio>
<source src="" type=""></source>
</audio>

注意点： audio的使用跟video的使用方式基本一样，video中可以使用的属性在audio标签中也基本可以使用，除了三个属性： height/width/poster

14.详情与概要标签
格式： 
<details>
 <summary>概要信息</summary>
 详情信息
</details>

作用: 利用summary标签来描述概要信息，利用details标签来描述详情信息；
默认情况下是折叠展示， 想看见必须点击；

15.marquee标签
注意点： marquee不是w3c推荐的标签， 在w3c官方文档中也无法查询这个标签，但是各大浏览器对这个标签的支持非常好
作用： 跑马灯效果
格式： <marquee>内容</marquee>
属性: 
direction:设置滚动方向, left/right/up/down
scrollamount: 可以设置内容滚动的速度，值越大速度越快
loop: 设置滚动次数，默认是-1代表无限次
behavior: 设置滚动类型，slide是滚动到边界就停止滚动， alternate是滚动到边界就弹回

16.html中被废弃的标签
因为当前html中的标签只有一个作用，就是用来添加语意的；而早期的html标签有一部分标签是没有语意的，有一部分是修改样式的
被废弃的标签：
<br> <hr> <b> <u> <i> <s>都是没有语意的，都是用来修改样式的
b(bold) 
u(underline)给文本添加下划线，没有任何语意
i(italic)将文本倾斜
s(strikethrough)给文本添加删除线

注意点：以后在企业开发中，不到万不得已一定不要使用这些被废弃的标签
如果一定要使用，都是做css的钩子

strong===b   ins===u   em===i   del===s
strong: 定义重要性强调的文字
ins(inserted):定义插入的文字
em(emphasized): 定义重要性强调的文字
del(deleted):定义被删除的文字

17.字符实体
在html中对空格，回车等不敏感， 会把多个空格/回车/tab当做一个空格来处理
在html中有的字符是被html保留的，有的html字符在html中是有特殊含义的，是不能在浏览器中直接显示出来的，那么这些东西要想显示出来就必须通过字符实体

&nbsp;就是一个字符实体代表空格，一个&nbsp;代表一个空格，有多少个&nbsp;就代表多少个空格
&lt;小于符号
&gt;大于符号
版权符号： &copy;

18.css
1.规定文字样式的属性
font-style: italic; 斜体
normal是正常的，默认的属性

2.规定文字粗细的属性
font-weight: bold; 还可以取bolder 100-900之间的数字
3.规定文字大小的属性
font-size: 30px; 取值是像素
注意点: 通过font-size设置大小一定要带单位，也就是一定要写px
4.规定文字字体的属性
font-family: "微软雅黑"
注意点：1. 如果取值是中文，需要用双引号括起来 2. 设置的字体必须是用户电脑里面已经安装的字体

1. 如果设置的字体不存在，那么系统会使用默认的字体来显示
2. 如果设置的字体不存在，但是又不想使用默认的字体来显示怎么办？
格式： font-family: "字体1","备选方案1",...;
3. 如果想给中文跟英文分别单独设置字体该怎么办？
但凡中文字体里面都包含了英文；但凡英文字体里面都没有包含中文；
也就是中文字体可以处理英文，但是英文字体却不可以处理中文
font-family: Arial, "楷体"; 用备选方案处理中文

在企业开发中最常见的字体有以下几个：
中文： 宋体SimSun、黑体SimHei、微软雅黑(Microsoft YaHei)
英文： 'Times New Roman'、Arial

缩写格式： font:italic bold 10px "楷体";
          font: bold 10px "楷体";
          font: 10px "楷体";
在这种缩写格式中有些属性是可省略的：style 跟 weight是可以省略的
同时style跟weight的位置是可以交换的，但是size跟family是不可以省略的， size一定要写在family的前面；

19.文本属性
1. 文本装饰的属性
格式: text-decoration: underline;
取值：underline下划线 line-through删除线 overline上划线 none啥都没有，最常见的用途就是去掉超链接的下划线
2.文本水平对齐的属性
格式： text-align: center;
取值： left, right, center

3.文本缩进的属性
格式： text-indent: 2em;
取值： 2em，其中em是单位，一个em代表缩进一个文字的宽度

20.颜色属性
1.css中如何通过color属性来修改文字颜色
格式; color:值
取值：
1.英文单词，一般情况常见的颜色都有对应的英文单词，但是英文单词能过表达的颜色是有限制的，也就是说不是所有的颜色都能通过英文单词来表达
2.rgb，就是三原色，（r是red，g是green, b是blue）格式: rgb(0,0,0)
第一个数字就是用来设置三原色的光源元件红色的显示亮度
第二个数字就是用来设置三原色的光源元件绿色的显示亮度
第三个数字就是用来设置三原色的光源元件蓝色的显示亮度
这其中的每一个数字的取值范围是0-255
红色 rgb(255,0,0)
绿色 rgb(0,255,0)
蓝色 rgb(0,0,255)
黑色 rgb(0,0,0);
白色 rgb(255,255,255);
在前端开发中，其实并不常使用黑色；只要让红色，绿色，蓝色的值都一样就是灰色；而它们的值越小越偏黑色，越大越偏白色

3.rgba 
是css3推出来的，a是透明度，取值是0-1,值越小就越透明

4.十六进制 
在前端开发中，通过十六进制来表示颜色，其实本质就是RGB
什么是十六进制？十六进制跟十进制一样都是一种计数的方式；在十进制中是0-9，逢10进1；十六进制是0-f,逢16进1
5.十六进制的缩写

21.标签选择器：
作用：根据指定的标签名称，在当前界面中找到所有的该名称的标签，然后设置属性

格式: 标签名称{}
注意：1.标签选择器选中的是当前界面中所有的标签，而不能单独选中某一个标签
2.标签选择器无论标签藏得多深，都能选中
3.只要是html中的标签就可以作为标签选择器

22.id选择器
id名称在当前界面是不允许重复的
在企业开发中，如果仅仅是为了设置样式，我们是不会使用id的，因为在前端开发中id是留给js使用的

23.后代选择器
作用：找到指定标签的所有的特定的后代标签，然后设置属性
格式: 
标签名称1 标签名称2{
  属性：值；
}
含义:先找到名称叫标签名称1的标签，然后再在这个标签下面去查找所有名称叫做标签名称2的标签，然后设置它们的属性
注意：
1.后代选择器必须用空格隔开
2.后代不仅仅是儿子，也包括孙子/重孙子，只要最终是放到指定标签中的都是后代

24.子元素选择器
作用：找到指定标签中所有特定的直接子元素，然后设置属性
格式:
标签名称1>标签名称2{
  属性：值；
}
先找到名称叫做“标签名称1”的标签，然后再这个标签中查找所有直接子元素名称叫做“标签名称2"的元素；
注意点：
1.子元素选择器只会查找儿子，不会查找其他嵌套的标签
2.子元素选择器直接需要用>符号连接，并且不能有空格
3.子元素选择器可以通过>符号一直延续下去

1.后代选择器与子元素选择器之间的区别？
1.1后代选择器使用空格作为连接符号；子元素选择器使用>符号作为连接符号
1.2后代选择器会选中所有的满足条件的后代标签，儿子/孙子...都会被选中；而子元素选择器只会选中所有直接的标签，也就是只会选中特定的儿子标签


2.后代选择器和子元素选择器之间的共同点
2.1都可以使用标签名称/id名称/class名称来作为选择器
2.2都可以通过各自的连接符号一直延续下去
选择器1 选择器2 选择器3...{}
选择器1>选取器2>选取器3...{}

25.交集选择器
作用：给所有选择器都选中的标签设置属性
格式：
选择器1选择器2{
  属性：值；
}

26.并集选择器
作用：给所有选择器都选中的标签设置属性
格式：
选择器1,选择器2{

}
注意点：
1.并集选择器必须使用逗号来连接

26.兄弟选择器
分类： 
1. 相邻兄弟选择器 
  格式： 选择器1+选择器2{
    属性：值；
  }
  注意点:相邻兄弟选择器必须通过+连接；相邻兄弟选择器只能选中紧跟其后的那个标签；

2.通用兄弟选择器
作用：给指定标签选中的所有标签设置属性
格式： 
选择器1~选择器2{

}

27.序选择器
css3中新增的选择器最具代表性的就是序选择器
1.同级别的第几个
:first-child 选中同级别中的第一个标签
注意：不区分类型

2.同类型的第几个
:first-of-type 选中同级别同类型的第一个标签
:last-of-type 选中同级别同类型中的最后一个标签

:nth-child(n) 选中同级别中的第n个标签
注意点：不区分类型

:nth-of-type(n) 选出同级别中同类型的第n个标签

:nth-last-child(n) 选出同级别中的倒数第n个
:nth-last-type(n) 选出同级别同类型中的倒数第n个
:only-child 选中父元素中唯一的元素
:only-of-type 选中父元素中唯一类型中的某个标签

:nth-child(odd) 选中同级别中的所有奇数
:nth-child(even) 选中同级别中的所有偶数

:nth-child(nx+y) x和y是用户自定义的，n是一个计数器，从0开始计数

28.属性选择器
作用：根据指定的属性名称找到对应的标签，然后设置属性
格式：
[attribute]
作用：根据指定的属性名称找到对应的标签，然后设置属性
示例： p[id]{}

[attribute=value]
作用：找到指定属性，并且属性的取值等于value的标签，然后设置属性
p[class=cc] input[type=password]{}

1.属性的取值是以什么开头的？
[attribute!=value] css2
[attribute^=value] css3
区别: css2中的只能找到value开头，并且value跟其他内容是用-隔开；
css3中的只要是以value开头的都可以找到

2.属性的取值是以什么结尾的？
[attribute$=value] css3
3.属性的取值是否包含某个特地的值？
[attribute~=value] css2
[attribute*=value] css3
css2只可以找到以空格隔开的
css3只要包含value就可以找到了

29.通配符选择器
作用：给当前界面上所有的标签设置属性
格式：
*{
属性:值；
}
注意点：由于通配符选择器是设置界面上所有的标签的属性，所以在设置之前会遍历所有的标签，如果当前的标签比较多，那么
性能就会比较差，所以在企业开发中一般不会使用

30.继承性（css三大特性之一）
作用: 给父元素设置的一些属性，子元素也可以使用，这个我们就称之为继承性

注意点：
1.并不是所有的属性都是可以继承的，只有以color/font-/text-/line-开头的才可以继承
2.在css的继承中不仅仅是儿子可以继承，只要是后代都可以继承
3.css继承中的特殊性：a标签的文字颜色和下划线是不能继承的；h标签的文字大小是不能继承的

应用场景：
一般用于设置网页上的一些共性信息，例如网页的文字颜色，字体，文字大小等内容
body{
  font-size: 30px;...
}

31.层叠性（css三大特性之一）
作用：就是css处理冲突的一种能力

注意点:
层叠性只有在多个选择器选中“同一个标签”，然后又设置了“相同的属性”，才会发生层叠性

32.优先级(css三大特性之一)
作用：当多个选择器选中同一个标签，并且给同一个标签设置相同的属性时，如何层叠由优先级来确定
优先级判断的三种方式：
1.是否是直接选中（间接选中就是指继承）
如果是间接选中，那么谁离目标标签近就听谁的
2.是否是相同的选择器
p{color: red;} p{color: blue;}
如果都是直接选中，并且都是同类型的选择器，那么就是谁写在后面就听谁的
3.不同的选择器
如果都是直接选中，并且不是相同类型的选择器，那么就会按照选择器的优先级来层叠
id>类（class）>标签>通配符(*{})>继承>浏览器默认

33.important
作用：用于提升某个直接选中的标签的选择器中的某个属性的优先级，可以将被指定的属性的优先级提升为最高

注意点：
1.!important只能用于直接选中，不能用于间接选中
2.通配符选择器选中的标签也是直接选中的
3.!important只能提升被指定属性的优先级，其他属性的优先级不会被提升

34.优先级之权重问题
作用：当多个选择器混合在一起使用时，我们可以通过计算权重来判断谁的优先级最高

权重的计算规则：
1,首先计算id的个数，id数多的优先级高
2,如果id数一样，那么看类名的个数，类名个数多的优先级高
3,如果类名的个数也一样，那么就看标签的个数，标签个数多的优先级高
4,如果id个数一样，类名个数也一样，标签个数也一样，那么就不会继续往下计算了，谁写在后面就听谁的；
也就是说如果优先级一样，谁写在后面就听谁的

为了保证浏览器的兼容，获取网页滚动的偏移量需要如下写法：$("body").scrollTop() + $("html").scrollTop();

35.div
作用：div一般用于配合css完成网页的基本布局
容器级别的标签：可以嵌套其他所有的标签

36.span
作用：span一般用于配合css修改网页中的一些局部信息
文本级别的标签：只能嵌套文字、超链接、图片

行内元素：
不会独占一行；
如果没有设置宽度，默认跟内容一样宽；
不可以设置宽度跟高度

块级元素：
独占一行；
如果没有设置宽度，那么默认跟父元素一样宽；
如果设置了宽高，那么就按照设置的来显示

行内块级元素：
既不独占一行又可以设置宽度和高度，比如img标签

37.css元素显示模式的转换
1.通过元素的display属性来转换

2.display的取值：
block 转换为块级
inline 转换为行内
inline-block 转换为行内块级

38.背景图片
background-image:url()属性
注意点：
1.图片的地址必须放在url里面，图片的地址可以是本地的地址，也可以是网络的地址
2.如果图片的大小没有标签的大小大，那么会自动在水平跟垂直方向平铺和填充
3.如果网页上出现了图片，那么浏览器会再次发送请求获取图片

如何控制背景图片的平铺方式？
在css中有一个background-repeat属性，就是专门用于控制背景图片平铺方式的
background-repeat的取值：
repeat 默认，在水平和垂直都需要平铺
no-repeat 在垂直和水平都不平铺
repeat-x  只在水平方向平铺
repeat-y  只在垂直方向平铺

应用场景：
可以通过背景图片的平铺来降低图片的大小，提升网页访问的速度
同一个标签可以同时设置背景颜色跟背景图片；如果背景颜色跟图片同时存在，那么图片会覆盖颜色

如何控制背景图片的位置？
在css中有一个叫做background-position：属性；就是专门用于控制背景图片位置的

background-position: 水平方向 垂直方向；

取值：
具体的方位名词：
水平方向：left center right 
垂直方向: top center bottom

具体像素:
比如: background-position: 100px 200px;
一定要写单位，就是一定要写px;同时可以为负数

39.背景属性缩写的格式：
background: 背景颜色 背景图片 平铺方式 关联方式 定位方式；
注意：background属性中，任何一个属性都可以被省略；

40.背景关联方式
默认情况下图片会随着滚动条的滚动而滚动，如果不想让背景图片随着滚动条的滚动而滚动，那么我们可以修改背景图片跟滚动条的关联方式

如果修改背景图片的关联方式？
在css中有一个叫做background-attachment的属性，这个属性就是专门用于修改关联方式的
格式：background-attachment: scroll;
取值：scroll默认值，会随着滚动条的滚动而滚动； fixed不会随着滚动条的滚动而滚动

背景图片仅仅是一个装饰，不会占用空间；插入图片会占用空间；
背景图片有定位属性，可以很容易控制图片的位置；插入图片没有定位属性；

插入图片的语意比背景图片的语意要强，所以在企业中如果你的图片想被搜索引擎收录，那么推荐使用插入图片

41.精灵图
1.什么是css精灵图？
是一种图像合成技术

2.css精灵图的作用
可以减少请求的次数，以及可以降低服务器处理的压力

3.如何使用css精灵图
css的精灵图需要配合背景图片和背景定位来使用

42.边框
边框就是环绕在标签宽度和高度周围的线条

边框属性的格式：
连写(同时设置四条边的边框)：
border: 边框的宽度 边框的样式 边框的颜色；
连写(分别设置四条边的边框)：
border-top:边框的宽度 边框的样式 边框的颜色；
border-right:边框的宽度 边框的样式 边框的颜色；
border-bottom: 边框的宽度 边框的样式 边框的颜色；
border-left:边框的宽度 边框的样式 边框的颜色；

注意点：
1.连写格式中可以省略颜色属性，省略之后默认是黑色

2.3连写
border-width: 上 右 下 左；
border-style: 上 右 下 左；
border-color: 上 右 下 左；

三个属性省略时的规律：
上 右 下 左 > 上 右 下》左边的取值和右边的一样
上 右 下 左 > 上 右》左边的值和右边的一样，下边的值和上边一样
上 右 下 左 > 上》其他的取值都跟上边的取值一样

3.非连写(方向+要素)
border-left-width；20px;
border-left-style: double;
border-left-color: pink;

43.内边距
定义：边框跟内容之间的距离就是内边距

格式：
非连写：
padding-top；
padding-right:
padding-bottom:
padding-left:

连写：
padding: 上 右 下 左；

注意点：
1.给标签设置内边距之后，标签占有的宽度和高度会发生变化
2. 内边距也有背景颜色

44.外边距
定义：标签和标签之间的距离就是外边距

格式：
非连写： 
margin-top:
margin-right:
margin-bottom:
margin-left:

连写：
margin: 上 右 下 左;

注意点：
外边距的背景颜色不可以通过设置当前的标签来设置

外边距的合并现象：
在默认布局的垂直方向上，默认情况下是不会叠加的，会出现合并现象，谁的外边距比较大就听谁的；
水平方向上是不会出现合并现象的；

1.内容的宽度和高度
就是通过标签的width/height属性设置的宽度和高度

2.元素的宽度和高度
元素的宽度 = 左边框的宽度 + padding_left的宽度 + 内容的宽度 + 右边框的宽度 + padding_right的宽度；
元素的高度 = 上边框的宽度 + padding_top的宽度 + 内容的高度 + 下边框的宽度 + padding_bottom的宽度；


3.元素空间的宽度和高度
元素空间的宽度 = margin_left的宽度 + 元素的宽度 + margin_right的宽度；
元素空间的高度 = margin_top的高度 + 元素的高度 + margin_bottom的高度；

1.增加了padding之后，元素的宽高也会发送变化
2.如果增加了padding之后还想要保持元素的宽高，那么就必须减去内容的宽高

45.box-sizing属性
作用：可以保证在给盒子新增了padding和border之后，盒子元素的宽度和高度不变；
原理：就是在增加了padding和border之后，减去内容的宽度跟高度；

取值:
content-box:默认值，元素的宽高 = 边框 + 内边距 + 内容宽高；
border-box:元素的宽高 = 内容的宽高；

注意点：
1.如果两个盒子是嵌套关系，那么设置了里面一个盒子顶部的外边距，外面一个盒子也会被顶下来
2.如果不想被顶下来，那么可以给外边的盒子添加一个边框属性；
3.在企业开发中，一般情况下如果需要控制嵌套关系盒子之间的距离，应该首先考虑padding,其次再考虑margin；因为margin本质上是用于控制兄弟关系
之间间隙的；
4.在嵌套关系的盒子中，我们可以利用margin:0 auto;的方式来让里面的盒子水平居中；
margin: 0 auto;只对水平方向有效；

text-align:center跟margin:0 auto;的区别：
text-align:center的作用设置盒子中存储的文字、图片水平居中
margin: 0 auto；的作用让盒子自己水平居中；

为什么要清空默认边距（外边距和内边距）？
在企业开发中为了更好的控制盒子的宽度和计算盒子的宽高等等，所以一般在编写代码之前做的第一件事情就是清空默认的边距；

如何清空默认的边距？
格式：
*{
  margin: 0;
  padding: 0;
}
注意点：
通配符选择器会找到（遍历）当前界面中所有的标签，所以性能不好；

body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{margin:0;padding:0}

46.行高
css中所有的行都有自己的行高；
注意行高跟盒子的高度不是同一个概念；行高是某一行的高度，而盒子的高度是指的元素的高度；

规律：
1.文字在行高中是默认垂直居中的；
2.在企业开发中，我们经常将盒子的高度和行高设置为一样，那么这样就可以保证一行文字在盒子的高度中是垂直居中的；
简而言之：要想一行文字在盒子里面垂直居中，那么只需要设置这行文字的行高等于盒子的高度即可；
3.在企业开发中，如果一个盒子中有多行文字，那么我们就不能使用行高来实现文字垂直居中，只能通过设置padding来让文字居中；

1.在企业开发中，如果一个盒子中存储的是文字，那么一般情况下我们会以盒子左边的内边距为基准，不会以右边的内边距为基准，因为右边的内边距有误差
2.右边的误差从何而来？
因为右边如果放不下一个文字，那么文字就会换行显示，所以文字和内边距直接的距离就有误差。
3.顶部的内边距并不是边框都文字顶部的距离，而是边框到行高顶部的距离；

1.清空所有的边距
2.

47.网页的布局方式
网页的布局方式其实就是指浏览器是如何对网页中的元素进行排版的

1.标准流（文档流/普通流）排版方式
其实浏览器默认的排版方式就是标准流的排版方式；
在css中将元素分为三类，分别是块级元素/行内元素/行内块级元素
在标准流中有两种排版方式，一种是垂直排版，一种是水平排版；
垂直排版，如果元素是块级元素，那么就会垂直排版；
水平排版，如果元素是行内元素或者是行内块级元素，那么就会水平排版；

2.浮动流排版方式
浮动流是一种半脱离标准流的排版方式；
浮动流只有一种排版方式就是水平排版，它只能设置某个元素左对齐或者右对齐

注意：
1.浮动流中没有居中对齐，也就是没有center这个取值
2.在浮动流中是不可以使用margin: 0 auto; 的


3.定位流排版方式













